#+TITLE: Trevoke's emacs config
#+OPTIONS: toc:4

* TODO casual suite (or each package, one at a time)
These are very cool transient menus surfacing the most useful features of various built-in features (calc, dired, re-builder, agenda, and plenty more) and not built-in (avy)

* About
<<babel-init>>
Welcome to my emacs configuration.
I tinker with this file a lot, so I need a quick way to get to it.
I set a [[*Bookmarks][bookmark]] with =C-x r m= and I can get back here with =C-x r b=
* External tools required
- aspell
- revealjs
- hugo
- bibtex
- zotero?
- tree-sitter
- ... lsp servers
* Variables, paths, etc.
#+begin_src elisp
  (setq stag-easy-hugo-basedir "~/src/projects/trevoke.github.io-source"
        stag-easy-hugo-root "~/src/projects/trevoke.github.io"
        stag-org-reveal-root "/home/stag/mnt/internal/src/vendor/reveal.js"
        stag-org-directory "~/my-life/orgnotes/"
        stag-org-gtd-directory "~/my-life/orgnotes/gtd"
        stag-org-roam-directory "~/my-life/orgnotes/roam"
        stag-org-roam-db-location "~/.emacs.d/local-files/org-roam.db"
        stag-bbdb-file "~/my-life/orgnotes/bbdb/big-brother-database"
        stag-bibliography-file "~/my-life/orgnotes/references/library.bib"
        stag-cite-export-processors '((t . (csl "/home/trevoke/my-life/orgnotes/references/modern-language-association.csl")))
        stag-ledger-journal "~/my-life/accounting-personal/2025.ledger"
        )
#+end_src
** Packages (without package management)
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/packages")
#+END_SRC
** Themes
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
;; (load-theme 'mejelly t)
#+END_SRC
** Secrets & personal information
API keys, passwords, etc are kept in here. This file is .gitignored.
#+BEGIN_SRC emacs-lisp
(load "~/.emacs.d/.emacs.secrets" t)
#+END_SRC
** asdf (access to programming languages managed with asdf)
#+begin_src emacs-lisp
  (setenv "PATH" (concat (getenv "PATH") ":~/.asdf/shims"))
  (setq exec-path (append exec-path '("~/.asdf/shims")))
#+END_SRC
* Package management
** Quelpa & Use-package
I use [[https://github.com/jwiegley/use-package][use-package]], because:
1. it's got a nice and concise macro interface
2. it allows me to set up emacs on any OS I desire more easily than other options I've encountered so far

[[https://github.com/quelpa/quelpa][Quelpa]] lets me pull from specific source code repos and branches beyond the existing package repositories, which is sometimes convenient.

See the [[./init.el]] file for these things.
* UI
#+begin_src elisp
  (customize-set-variable 'frame-background-mode 'auto)
#+end_src
This is first because nano-theme, while providing a gorgeous UI, has lots of opinions and makes some destructive changes.
#+begin_src elisp
  ;; (use-package nano-theme
  ;;   :ensure nil
  ;;   ;:defer t
  ;;   :quelpa (nano-theme
  ;;            :fetcher github
  ;;            :repo "rougier/nano-theme")
  ;;   :init
  ;;   ;(load-theme 'modus-vivendi-tinted t)
  ;;   :config
  ;;   ;(nano-mode)
  ;;   ;(load-theme 'nano-dark t)
  ;;   )
#+end_src
** Override some nano-theme defaults
#+begin_src elisp
  (setq initial-major-mode 'emacs-lisp-mode)
#+end_src

#+begin_src elisp
  (setq-default cursor-type '(box .  2))
  (setq-default cursor-in-non-selected-windows t)
  (setq blink-cursor-mode t)
#+end_src

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (setq inhibit-startup-echo-area-message t)
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
  (setq inhibit-splash-screen t)

  (show-paren-mode t)
  (setq show-paren-delay 0)

  (global-hl-line-mode t)

  (setq column-number-mode t)
  (setq ring-bell-function 'ignore)
  (setq visible-bell t)
  (setq system-uses-terminfo nil)
#+END_SRC

This shows the file path in the GUI header
#+BEGIN_SRC emacs-lisp
  (setq-default frame-title-format
                '((:eval (if (buffer-file-name)
                             (abbreviate-file-name (buffer-file-name))
                           "%f"))))
#+END_SRC
* General emacs config
** Garbage collection
#+begin_src emacs-lisp
(setq gc-cons-threshold (* 100 1024 1024))
#+end_src
** UTF-8
#+BEGIN_SRC emacs-lisp
;; Activate UTF-8 mode:
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

;; 2013-12-10 IRC #Emacs
(set-clipboard-coding-system 'utf-8)

;; http://www.masteringemacs.org/articles/2012/08/09/working-coding-systems-unicode-emacs/
;; in addition to the lines above:

(set-default-coding-systems 'utf-8)
;; backwards compatibility as default-buffer-file-coding-system
;; is deprecated in 23.2.
(if (boundp 'buffer-file-coding-system)
    (setq-default buffer-file-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8))
;; Treat clipboard input as UTF-8 string first; compound text next, etc.
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+END_SRC
** Customizations from customization system
Keeping these separate makes life easier: they get modified when I load a theme and such, and I don't need that kind of hassle when maintaining my actual configuration, you know?
In addition, I do keep some somewhat computer-specific stuff in there, like the font, and it's just easier to have this separated there.
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/local-files/emacs-custom.el")
(load custom-file t) ;; t means no error if file does not exist
#+END_SRC
** Backups
Centralize emacs backups. This directory is gitignored.
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/local-files/backups")))
#+END_SRC
And I'm not super-worried about old backups and other such things, so I'll just tell emacs to stop worrying about it.
#+BEGIN_SRC emacs-lisp
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms
        '((".*" "~/.emacs.d/local-files/auto-save-list/" t)))
  (setq auto-save-list-file-prefix
        "~/.emacs.d/local-files/auto-save-list/.saves-")
#+END_SRC
** Quality of life
*** Yes/No => y/n
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Recent files
#+begin_src emacs-lisp
  (setq recentf-save-file "~/.emacs.d/local-files/recentf")
  (require 'recentf)
#+end_src
*** History
Stolen from https://www.wisdomandwonder.com/wp-content/uploads/2014/03/C3F.html
#+BEGIN_SRC emacs-lisp
  (setq savehist-file "~/.emacs.d/local-files/savehist")
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring))
  (savehist-mode 1)
#+END_SRC
*** Bookmarks
#+begin_src emacs-lisp
  (setq bookmark-default-file "~/.emacs.d/local-files/bookmarks")
  (require 'bookmark)
#+end_src
** TODO Window config (Put OSX stuff somewhere else)
I don't really care about any of the extra details - emacs helps me out enough in other ways.
#+BEGIN_SRC emacs-lisp
(when window-system
  (tooltip-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1))
#+END_SRC
Although of course if you're on OSX, at least the menu bar can be enabled since the mighty OSX top bar won't ever disappear.
And I've also added other OSX-specific stuff here... For now.
#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns))
    (setq mac-command-modifier 'super)
    (setq mac-option-modifier 'meta)
    (setq ns-use-srgb-colorspace t)
    (menu-bar-mode t))
#+END_SRC
** Buffer management
I like unique buffer names. Enter uniquify.
#+BEGIN_SRC emacs-lisp
(require 'uniquify)
(setq
  uniquify-buffer-name-style 'post-forward
  uniquify-separator ":")
#+END_SRC
Also, ibuffer is nicer than plain-old buffer window
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer-other-window)
(setq ibuffer-default-sorting-mode 'major-mode)
#+END_SRC
** Scrolling
#+BEGIN_SRC emacs-lisp
(setq scroll-step 1)
(setq scroll-conservatively 10000)
(setq auto-window-vscroll nil)
(setq mouse-wheel-scroll-amount '(1 ((shift) . 5))) ;; five lines at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse t) ;; scroll window under mouse
#+END_SRC
* Frame management
** Transparency
#+BEGIN_SRC emacs-lisp
(use-package seethru :pin "melpa")
#+END_SRC
** text scaling
This handy little package increases the size of the font in the whole frame.
#+BEGIN_SRC emacs-lisp
(use-package default-text-scale
  :bind (("C-x C-=" . default-text-scale-increase)
         ("C-x C--" . default-text-scale-decrease)))
#+END_SRC
* Window management
** Window layout manager (built-in to emacs)
Prefix key is =C-x C-t=
** Winner-mode (undo/redo window changes)
Remember: =C-c <left>= and =C-c <right>=
#+BEGIN_SRC emacs-lisp
(winner-mode)
#+END_SRC
** Windmove (move across windows with shift+arrow)
#+BEGIN_SRC emacs-lisp
(use-package windmove
:ensure nil
:after org
:config
  (windmove-default-keybindings)
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right)
)
#+END_SRC
** Move to new window when splitting
Taken from http://www.reddit.com/r/emacs/comments/25v0eo/you_emacs_tips_and_tricks/chldury
#+BEGIN_SRC emacs-lisp
(defun stag-vsplit-last-buffer (prefix)
  (interactive "p")
  (split-window-vertically)
  (other-window 1 nil)
  (unless prefix
          (switch-to-next-buffer)))

(defun stag-hsplit-last-buffer (prefix)
  (interactive "p")
  (split-window-horizontally)
  (other-window 1 nil)
  (unless prefix
    (switch-to-next-buffer)))

(global-set-key (kbd "C-x 2") 'stag-vsplit-last-buffer)
(global-set-key (kbd "C-x 3") 'stag-hsplit-last-buffer)
#+END_SRC
** Interacting with emacs
*** Fonts and stuff
I found this function online somewhere, before I thought tracking code origin for this config file might matter.
All it does is tell you what face is at point. It toggles hl-line-mode if needed.
#+BEGIN_SRC emacs-lisp
  (defun stag-what-face (pos)
    (interactive "d")
    (let* ((local-hl-p hl-line-mode)
           (global-hl-p global-hl-line-mode)
           (off (if local-hl-p (hl-line-mode -1)))
           (off (if global-hl-p (global-hl-line-mode -1)))
           (face (or (get-char-property pos 'read-face-name)
                     (get-char-property pos 'face))))
      (if face (message "Face: %s" face)
        (message "No face at %d" pos))
      (if local-hl-p (hl-line-mode))
      (if global-hl-p (global-hl-line-mode))))
#+END_SRC
*** Disable C-z to minimize
Suspend emacs？ I'll use C-x C-z.
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-z"))
(global-unset-key (kbd "C-x C-z"))
#+END_SRC
** Define text interactions
*** Use visual-line-mode
#+BEGIN_SRC emacs-lisp
  (remove-hook 'text-mode-hook #'turn-on-auto-fill)
  (add-hook 'text-mode-hook #'turn-on-visual-line-mode)
  ; when in emacs 30 do this:
  ; (add-hook 'text-mode-hook #'visual-wrap-prefix-mode)
#+END_SRC
*** TODO Redefine kill-region and backward-kill-word (decide whether to keep this?)
I used Bash for a long time. This allows me to keep using Ctrl-w to delete a word backward.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-w") 'backward-kill-word)
(global-set-key (kbd "C-x C-k") 'kill-region)
#+END_SRC
*** Move down real line by real line
#+BEGIN_SRC emacs-lisp
(setq line-move-visual nil)
#+END_SRC
*** Sentences end with a single space
#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC
*** Inserting new lines before/after current one
#+BEGIN_SRC emacs-lisp
(defun stag-insert-line-below ()
  "Insert and auto-indent line below cursor, like in vim."
  (interactive)
  (move-end-of-line 1)
  (open-line 1)
  (next-line)
  (indent-for-tab-command))

(defun stag-insert-line-above ()
  "Insert and auto-indent line above cursor, like in vim."
  (interactive)
  (previous-line)
  (move-end-of-line 1)
  (stag-insert-line-below))

(global-set-key (kbd "C-o") 'stag-insert-line-below)
(global-set-key (kbd "C-M-o") 'stag-insert-line-above)
#+END_SRC

*** Navigating text
avy is kinda badass.
#+BEGIN_SRC emacs-lisp
(use-package avy
    :bind (("C-c j" . avy-goto-char-2)
           ("C-x j" . avy-po-mark)))
#+END_SRC
* Engines
** evil-mode
Because sometimes, vim.
#+BEGIN_SRC emacs-lisp
(use-package evil)
#+END_SRC
** TODO Modeline (use nano-modeline?)
#+begin_src elisp
  ;; (use-package nano-modeline
  ;;   :ensure nil
  ;;   :quelpa (nano-modeline
  ;;            :fetcher github
  ;;            :repo "rougier/nano-modeline")
  ;;   :hook
  ;;   (prog-mode . nano-modeline-prog-mode)
  ;;   (text-mode . nano-modeline-text-mode)
  ;;   (org-mode . nano-modeline-org-mode)
  ;;   (pdf-view-mode . nano-modeline-pdf-mode)
  ;;   (mu4e-headers-mode . nano-modeline-mu4e-headers-mode)
  ;;   (mu4e-view-mode . nano-modeline-mu4e-message-mode)
  ;;   (elfeed-show-mode . nano-modeline-elfeed-entry-mode)
  ;;   (elfeed-search-mode . nano-modeline-elfeed-search-mode)
  ;;   (term-mode . nano-modeline-term-mode)
  ;;   (xwidget-webkit-mode . nano-modeline-xwidget-mode)
  ;;   (messages-buffer-mode . nano-modeline-message-mode)
  ;;   (org-capture-mode . nano-modeline-org-capture-mode)
  ;;   (org-agenda-mode . nano-modeline-org-agenda-mode))
#+end_src
** Minibuffer
#+begin_src elisp
  (use-package minibuffer
    :ensure nil
    :demand
    :config
    (file-name-shadow-mode 1)
    (minibuffer-depth-indicate-mode 1)
    (minibuffer-electric-default-mode 1)
    :bind (("C-x C-m" . execute-extended-command)))

  (use-package marginalia
    :after (vertico embark consult)
    :init
    (marginalia-mode)
    ;; (advice-add #'marginalia-cycle :after
    ;;             (lambda () (when (bound-and-true-p selectrum-mode) (selectrum-exhibit 'keep-selected))))
    )
#+end_src
*** UI
#+begin_src elisp
  (use-package nano-minibuffer
    :ensure nil
    :quelpa (nano-minibuffer
             :fetcher github
             :repo "rougier/nano-minibuffer")
    ;:config
    ;(nano-minibuffer-mode)
    )
#+end_src
** Command completion
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :pin elpa
    :init
    (vertico-mode)
    :custom
    (completion-styles '(flex basic partial-completion emacs22)))

  (use-package vertico-prescient
    :after (vertico prescient)
    :config
    (vertico-prescient-mode +1)
    (prescient-persist-mode +1))

  (use-package prescient
    :init
    (setq prescient-save-file "~/.emacs.d/local-files/prescient-save.el")
    :custom
    (prescient-sort-length-enable nil)
    (prescient-filter-method '(literal initialism anchored fuzzy)))

#+END_SRC
** Actions
#+begin_src emacs-lisp
  (use-package embark)

  (use-package embark-consult
    :after (embark consult))
#+end_src
** Input completion
#+begin_src emacs-lisp
  (use-package consult :after vertico)
#+end_src
** Text completion
*** company-mode
#+BEGIN_SRC emacs-lisp
  (use-package company
    :hook (prog-mode . company-mode))
#+END_SRC
*** Snippets
I don't use snippets at the moment but I should look into tempel:
https://github.com/minad/tempel
https://github.com/fejfighter/eglot-tempel
https://github.com/Crandel/tempel-collection
** Linting
#+begin_src elisp
  (use-package flycheck)
#+end_src
** LSP (Language Server Protocols)
#+begin_src elisp
        ;; TODO : elixir
        ;; TODO : keymap prefix: C-c i ?
        (use-package eglot
          :ensure nil
          :demand)

        (use-package consult-eglot
          :pin "melpa"
          :after (consult eglot))

        (use-package consult-eglot-embark
          :pin "melpa"
          :after (consult-eglot embark)
          :config
        (consult-eglot-embark-mode))

        (use-package flycheck-eglot
          :pin "melpa"
          :after (flycheck eglot)
          :config (global-flycheck-eglot-mode 1))
#+end_src
** Menus
#+begin_src emacs-lisp
  (assq-delete-all 'transient package--builtins)
  (assq-delete-all 'transient package--builtin-versions)
  (use-package transient
    :init
    (setq transient-history-file "~/.emacs.d/local-files/transient/history.el"
          transient-levels-file "~/.emacs.d/local-files/transient/levels.el"
          transient-values-file "~/.emacs.d/local-files/transient/values.el"))
#+end_src
** Searching
*** Anzu (about search results)
#+BEGIN_SRC emacs-lisp
  (use-package anzu
    :config (global-anzu-mode t)
    :bind (("M-%" . anzu-query-replace)
           ("C-M-%" . anzu-query-replace-regexp)))
#+END_SRC
*** Silver searcher + Wgrep-ag
Sometimes after you've found a bunch of things, you want to edit.. Kind of a find-and-replace sort of deal, maybe?

I forget the basic keybindings all the time: After a search using =ag=, use C-c C-p to start editing the results buffer, and use C-c C-c to save the changes and C-c C-k to cancel.
#+BEGIN_SRC emacs-lisp
(use-package ag
  :config
  (setq ag-reuse-buffers 't))

(use-package wgrep-ag
  :after ag
    :init  (add-hook 'ag-mode-hook 'wgrep-ag-setup)
    :config (autoload 'wgrep-ag-setup "wgrep-ag"))
#+END_SRC
** Code Projects (is this the right place for this?)
*** Project navigation
Projectile is pretty sweet.
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :init
  (setq projectile-known-projects-file "~/.emacs.d/local-files/projectile-bookmarks.eld")
  (setq projectile-cache-file "~/.emacs.d/local-files/projectile.cache")
  :config
  (projectile-global-mode)
  (setq projectile-completion-system 'default)
  :bind (("C-c p" . projectile-command-map)))
#+END_SRC

** File (text/code) Structure
#+begin_src elisp
(use-package imenu
  :ensure nil
  :demand
  :config
  (setq imenu-use-markers t)
  (setq imenu-auto-rescan t)
  (setq imenu-auto-rescan-maxout 600000)
  (setq imenu-max-item-length 100)
  (setq imenu-use-popup-menu nil)
  (setq imenu-eager-completion-buffer t)
  (setq imenu-space-replacement " ")
  (setq imenu-level-separator "/"))

(use-package imenu-list
  :after imenu)
#+end_src
** Selecting text
*** Expand region
One of the features that makes IDEA's editors awesome is the way you can expand selection. This plugin replicates the feature.
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind (("C-c <up>" . er/expand-region)
           ("C-c <down>" . er/contract-region)))
#+END_SRC

* Org-mode
The code to install org-mode itself is in the init.el file (because it is built-in and needs some love).
Here is additional configuration for it.
** libraries for exporting
I've been having some issues exporting, so I'm actively loading libraries here.
#+BEGIN_SRC emacs-lisp
  (use-package ox :ensure nil :after org)
  (use-package org-macro :ensure nil :after org)
  (use-package ob-exp :ensure nil :after org)
  (use-package org-compat :ensure nil :after org)

  (use-package ox-md :ensure nil :after ox)

  ;; (use-package ox-pandoc :after ox)

  (use-package ol-notmuch :after notmuch)
#+END_SRC
** Generic org-mode configuration
#+BEGIN_SRC emacs-lisp
    (setq org-src-fontify-natively t)
    (add-to-list 'auto-mode-alist '(".org.txt$" . org-mode))

    (setq org-startup-indented t)
    (setq org-cycle-separator-lines 0)
    (setq org-goto-interface 'outline-path-completion) ;; useful with C-c C-j
    (setq org-M-RET-may-split-line '((default .t) (headline . nil)))
#+END_SRC
** Org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets :after org
    :init (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC
** Adding images
#+BEGIN_SRC emacs-lisp
  (use-package org-download :pin "melpa" :after org)
#+END_SRC
** global keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cb" 'org-switchb)
  (org-defkey org-mode-map "\C-cr" 'org-refile)
#+END_SRC
* GTD (Getting Things Done)
** Org-gtd
#+BEGIN_SRC emacs-lisp
    (use-package org-gtd
      :after org
      :quelpa ((org-gtd :fetcher github :repo "trevoke/org-gtd.el")
               :upgrade t)
      :demand t
      :init
      (setq org-gtd-update-ack "3.0.0")
      :custom
      (org-gtd-directory stag-org-gtd-directory)
      (org-agenda-property-position 'next-line)
      (org-edna-use-inheritance t)
      :config
      (org-edna-mode 1)
      :bind
      (("C-c d c" . org-gtd-capture)
       ("C-c d e" . org-gtd-engage)
       ("C-c d p" . org-gtd-process-inbox)
       ("C-c d n" . org-gtd-show-all-next)
       ("C-c d s" . org-gtd-show-stuck-projects)
       :map org-gtd-clarify-map
       ("C-c c" . org-gtd-choose)))
  (require 'org-gtd)
#+END_SRC
** Diary
#+BEGIN_SRC emacs-lisp
(setq diary-file (concat org-directory "diary-file.org"))

(setq view-diary-entries-initially t
      mark-diary-entries-in-calendar t
      diary-number-of-entries 7)
(add-hook 'diary-display-hook 'diary-fancy-display)
#+END_SRC
** Action Tags
These are tags to add to tasks, such as types of action, mindset I need to be in, tool Ι need to have, emotional reward I'll get from doing the action, etc. Whatever helps me pick a task to accomplish.
#+BEGIN_SRC emacs-lisp
  (setq org-tag-alist '(("@home" . ?h)
                        ("@work" . ?w)
                        ("@nonet" . ?n)
                        ("code")))
#+END_SRC
** Captures
#+BEGIN_SRC emacs-lisp
  (use-package org-capture
    :ensure nil
    :after org
    :config
    (setq org-default-notes-file (concat org-directory "notes.org")))
#+END_SRC
** Refiling
#+BEGIN_SRC emacs-lisp
  (setq org-refile-use-outline-path nil)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes nil)
  (setq org-log-refile 'time)
#+END_SRC
* Zettelkasten
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :pin melpa
    :after org
    :ensure t
    :init
    (setq org-roam-db-location stag-org-roam-db-location
          org-roam-v2-ack t)
    :config
    (org-roam-db-autosync-mode)
    ;:hook
    ;(after-init . org-roam-mode)
    :custom
    (org-roam-directory stag-org-roam-directory)
    :bind
    ("C-c n l" . org-roam-buffer-toggle)
    ("C-c n t" . org-roam-dailies-goto-today)
    ("C-c n f" . org-roam-node-find)
    ("C-c n i" . org-roam-node-insert)
    ("C-c n g" . org-roam-graph))

  (use-package org-roam-ui
    :pin "melpa"
    :ensure t
    :after org-roam
    ;; uncomment if you want this to be turned on at emacs boot time.
    ; :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

  (use-package org-roam-timestamps
    :pin "melpa"
    :after org-roam
    :config (org-roam-timestamps-mode))
#+END_SRC

* Agenda
#+BEGIN_SRC emacs-lisp
  (use-package org-agenda
    :ensure nil
    :no-require t
    :after org
    :custom
    (org-agenda-diary-file 'diary-file)
    (org-agenda-include-diary t)
    (org-agenda-restore-windows-after-quit t)
    (org-agenda-sticky t)
    (org-agenda-window-setup 'other-window)
    (org-agenda-skip-deadline-if-done t)
    (org-agenda-skip-scheduled-if-done t)
    (org-agenda-start-on-weekday nil))
#+END_SRC

A quick and pretty agenda view
#+begin_src elisp
  (use-package nano-agenda
    :after org-agenda
    :ensure nil
    :quelpa (nano-agenda
             :fetcher github
             :repo "rougier/nano-agenda"))
#+end_src
* Calendar, dates, times
#+BEGIN_SRC emacs-lisp
  (setq calendar-week-start-day 1) ;; Monday
  (add-hook 'today-visible-calendar-hook 'calendar-mark-today)

  (use-package org-gcal
    :pin "melpa"
    :after (org-agenda)
    :init
    (setq org-gcal-dir "~/.emacs.d/local-files/org-gcal/")
    (setq org-gcal-cancelled-todo-keyword "CNCL"))

  (use-package calfw-gcal :pin "melpa"
    :after calfw-org)

  (use-package calfw-org
    :after (org-gcal calfw)
    :demand t)

  (use-package calfw
    :config
    (setq cfw:fchar-junction ?╋
          cfw:fchar-vertical-line ?┃
          cfw:fchar-horizontal-line ?━
          cfw:fchar-left-junction ?┣
          cfw:fchar-right-junction ?┫
          cfw:fchar-top-junction ?┯
          cfw:fchar-top-left-corner ?┏
          cfw:fchar-top-right-corner ?┓))
#+END_SRC
And a pretty calendar which, among other things, tells you how busy a given day is based on what's in your org-agenda-files.
Note this is on hold due to a dependency on nano-theme.
#+begin_src elisp
  ;; (use-package nano-calendar
  ;;   :ensure nil
  ;;   :quelpa (nano-calendar
  ;;            :fetcher github
  ;;            :repo "rougier/nano-calendar")
  ;;   :custom
  ;;   (nano-calendar-show-busy t))
#+end_src
* File system browsing
** Dired
dired-jump is awesome (=C-x C-j= in any buffer)
#+BEGIN_SRC emacs-lisp
(require 'dired-x)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Changed my mind. I prefer seeing just the files:
 (add-hook 'dired-mode-hook 'dired-hide-details-mode)

;; Auto-refresh silently
 (setq global-auto-revert-non-file-buffers t)
 (setq auto-revert-verbose nil)
#+END_SRC

This will make dired behave kinda like a two-pane file manager: with two direds open, you can copy/rename and the default target will be the other pane.
Using split-window-vertically from the first dired might be required to make this work.
#+BEGIN_SRC emacs-lisp
(setq dired-dwim-target t)
#+END_SRC

OSX.. Windows.. *sigh*.
#+BEGIN_SRC emacs-lisp
(setq ls-lisp-use-insert-directory-program nil)
(require 'ls-lisp)
#+END_SRC

It's also nice to have dired with M-< and M-> take you to first and last file
#+BEGIN_SRC emacs-lisp
(require 'dired)
(defun dired-back-to-top ()
  (interactive)
  (beginning-of-buffer)
  (next-line 2))

(define-key dired-mode-map
  (vector 'remap 'beginning-of-buffer) 'dired-back-to-top)

(defun dired-jump-to-bottom ()
  (interactive)
  (end-of-buffer)
  (next-line -1))

(define-key dired-mode-map
  (vector 'remap 'end-of-buffer) 'dired-jump-to-bottom)
#+END_SRC
* Terminal emulators
** vterm
#+begin_src emacs-lisp
(use-package vterm :pin melpa)
#+end_src
* Email
** BBDB
#+begin_src emacs-lisp
(use-package bbdb
  :after org
  :config
  (setq bbdb-file stag-bbdb-file)
  (require 'ol-bbdb))
#+end_src
** Sending email
#+BEGIN_SRC emacs-lisp
(setq mail-user-agent 'message-user-agent)

(setq smtpmail-stream-type 'ssl
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 465)
#+END_SRC

smtpmail-multi
#+BEGIN_SRC emacs-lisp
  (use-package smtpmail-multi
    :pin "melpa"
    :config
    (setq smtpmail-auth-credentials "~/.authinfo.gpg")
    (setq smtpmail-multi-accounts
          `((home . (,user-mail-address
                     "smtp.gmail.com"
                     587
                     ,user-mail-address
                     starttls
                     nil nil nil))))

    (setq smtpmail-multi-associations
          `((,user-mail-address home)))

    (setq smtpmail-multi-default-account 'home)

    (setq message-send-mail-function 'smtpmail-multi-send-it)

    (setq smtpmail-debug-info t)
    (setq smtpmail-debug-verbose t))
#+END_SRC
** Encrypting email
#+begin_src elisp
  (defun stag-email-hook ()
      (epa-mail-mode))
  (add-hook 'message-mode-hook 'stag-email-hook)
#+end_src
** Reading email
orgstruct++ was removed in org 9.2
It seems I may want to use orgalist.
#+BEGIN_SRC emacs-lisp
  (defun stag-trash-email ()
    (interactive)
    (notmuch-search-tag '("-inbox" "+trash")))
  (use-package notmuch
    :after org
    :bind (:map notmuch-search-mode-map
    ("C-c d" . stag-trash-email))
    :config
    (add-hook 'notmuch-message-mode-hook 'stag-email-hook))

  (use-package notmuch-transient
    :after (transient notmuch))
#+END_SRC
* Writing
** TODO Symbols
=C-x 8 RET=
Or =M-x set-input-method RET tex= then things like =\beta= or =\triangle= will work: β, ▵.
** TODO Multiple languages
We need ~aspell~ installed on the local machine - and I just have to do ~C-x i d~ to change the dictionary to the correct language.
#+begin_src emacs-lisp
  (use-package ispell
    :ensure nil
    :demand t
    :ensure-system-package aspell
    :config
    (setq ispell-program-name "aspell")
    (setq ispell-dictionary "english"))
#+end_src
** Fixing typos

Whenever I make a typo:

1. Hit C-x C-i, instead of erasing the mistake;
2. Select the appropriate correction (thanks to Ispell);
3. Sleep easier at night knowing I'll never see that mistake again (thanks to abbrev).

This is not intended to be a good way to work on multiple languages -- but using a spellchecker for the correct language tends to help.

Source: http://endlessparentheses.com/ispell-and-abbrev-the-perfect-auto-correct.html

#+BEGIN_SRC emacs-lisp
  (define-key ctl-x-map "\C-i"
    #'stag/ispell-word-then-abbrev)

  (defun stag/ispell-word-then-abbrev (p)
    "Call `ispell-word', then create an abbrev for it.
  With prefix P, create local abbrev. Otherwise it will
  be global.
  If there's nothing wrong with the word at point, keep
  looking for a typo until the beginning of buffer. You can
  skip typos you don't want to fix with `SPC', and you can
  abort completely with `C-g'."
    (interactive "P")
    (let (bef aft)
      (save-excursion
        (while (if (setq bef (thing-at-point 'word))
                   ;; Word was corrected or used quit.
                   (if (ispell-word nil 'quiet)
                       nil ; End the loop.
                     ;; Also end if we reach `bob'.
                     (not (bobp)))
                 ;; If there's no word at point, keep looking
                 ;; until `bob'.
                 (not (bobp)))
          (backward-word))
        (setq aft (thing-at-point 'word)))
      (if (and aft bef (not (equal aft bef)))
          (let ((aft (downcase aft))
                (bef (downcase bef)))
            (define-abbrev
              (if p local-abbrev-table global-abbrev-table)
              bef aft)
            (message "\"%s\" now expands to \"%s\" %sally"
                     bef aft (if p "loc" "glob")))
        (user-error "No typo at or before point"))))

  (setq abbrev-file-name "~/.emacs.d/local-files/abbrev_defs")
  (setq save-abbrevs 'silently)
  (setq-default abbrev-mode t)
#+END_SRC
** TeX
#+BEGIN_SRC emacs-lisp
  (require 'flymake)

  (defun flymake-get-tex-args (file-name)
    (list "pdflatex"
          (list "-file-line-error" "-draftmode" "-interaction=nonstopmode" file-name)))


  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq TeX-save-query nil)

  (add-hook 'LaTeX-mode-hook 'flymake-mode)

  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-buffer)

  (defun stag-turn-on-outline-minor-mode ()
    (outline-minor-mode 1))

  (add-hook 'LaTeX-mode-hook 'stag-turn-on-outline-minor-mode)
  (add-hook 'latex-mode-hook 'stag-turn-on-outline-minor-mode)
  (setq outline-minor-mode-prefix "\C-c \C-o") ; Or something else
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :init
    (add-hook 'markdown-mode-hook 'turn-on-orgtbl))
#+END_SRC
*** TODO Github-Flavored Markdown (requires backend config?)
#+BEGIN_SRC emacs-lisp
  (use-package ox-md
    :ensure nil
    :after ox)
#+END_SRC
*** TODO My orgtbl-to-gfm conversion (obsoleted by above?)
It's quite nice to use an orgtbl, but GFM is weird. This converts to a GFM table. use C-c C-c to generate / update GFM table.
#+BEGIN_SRC emacs-lisp
;;; orgtbl-to-gfm conversion function
;; Usage Example:
;;
;; <!-- BEGIN RECEIVE ORGTBL ${1:YOUR_TABLE_NAME} -->
;; <!-- END RECEIVE ORGTBL $1 -->
;;
;; <!--
;; #+ORGTBL: SEND $1 orgtbl-to-gfm
;; | $0 |
;; -->

(defun orgtbl-to-gfm (table params)
  "Convert the Orgtbl mode TABLE to GitHub Flavored Markdown."
  (let* ((alignment (mapconcat (lambda (x) (if x "|--:" "|---"))
                               org-table-last-alignment ""))
         (params2
          (list
           :splice t
           :hline (concat alignment "|")
           :lstart "| " :lend " |" :sep " | ")))
           (orgtbl-to-generic table (org-combine-plists params2 params))))

(defun stag-insert-org-to-gfm-table (table-name)
  (interactive "*sEnter table name: ")
  (insert "<!---
#+ORGTBL: SEND " table-name " orgtbl-to-gfm

-->
<!--- BEGIN RECEIVE ORGTBL " table-name " -->
<!--- END RECEIVE ORGTBL " table-name " -->")
  (previous-line)
  (previous-line)
  (previous-line))

  (global-set-key (kbd "C-c t") 'stag-insert-org-to-gfm-table)
#+END_SRC
** mermaidjs
#+begin_src elisp
  (defun stag-preview-mermaid ()
    "Render region inside a webkit embedded browser."
    (interactive)
    (unless (region-active-p)
      (user-error "Select a region first"))
    (let* ((path (concat (make-temp-file (temporary-file-directory)) ".html"))
           (mermaid-code (buffer-substring-no-properties (region-beginning) (region-end))))
      (save-excursion
        (with-temp-buffer
          (insert "<body>
    <pre class=\"mermaid\">")
          (insert mermaid-code)
          ;; js script copied from mermaid documentation
          (insert "</pre>
    <script type=\"module\">
      import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';
      mermaid.initialize({ startOnLoad: true });
    </script>
  </body>")
          (write-file path)))
      (xwidget-webkit-browse-url (format "file://%s" path))))
#+end_src
* Presentations
** TODO Slides
*** revealjs
#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
  (use-package ox-reveal
    :after (htmlize ox)
    :pin "melpa"
    :config
    (setq org-reveal-root stag-org-reveal-root))
#+END_SRC
* Blogging
#+BEGIN_SRC emacs-lisp
  (use-package easy-hugo
    :after org
    :init
    (setq easy-hugo-org-header t)
    (setq easy-hugo-default-ext ".org")
    (setq easy-hugo-basedir stag-easy-hugo-basedir)
    (setq easy-hugo-url "http://blog.trevoke.net")
    (setq easy-hugo-root stag-easy-hugo-root)
    (setq easy-hugo-previewtime "300"))
#+END_SRC
#+begin_src elisp
  (use-package ox-hugo)
#+end_src
* Version control
** Git
*** Walking through a file's history
#+BEGIN_SRC emacs-lisp
(use-package git-timemachine)
#+END_SRC
*** Magit
Magit is a pretty amazing interface to git.
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-c g" . magit-status)
  :config (setq magit-last-seen-setup-instructions "1.4.0")
          (setq magit-completing-read-function 'magit-builtin-completing-read)
          (setq magit-popup-use-prefix-argument 'default))
#+END_SRC
**** Magit + gitflow
With this configuration, using C-f in a status buffer will trigger the gitflow selectors.
#+BEGIN_SRC emacs-lisp
(use-package magit-gitflow
  :after magit
  :config (add-hook 'magit-mode-hook 'turn-on-magit-gitflow))
#+END_SRC
* Communication Clients
** IRC
#+BEGIN_SRC emacs-lisp
(setq erc-lurker-hide-list '("JOIN" "PART" "QUIT"))
#+END_SRC

* Accounting
#+begin_src elisp
  (use-package hledger-mode :pin melpa
    :after company
    :mode "\\.ledger\\'"
    :custom
    (hledger-jfile stag-ledger-journal)
    (hledger-currency-string "$")
    (hledger-life-expectancy 100)
    (hledger-year-of-birth user-birth-year)
    :hook
    (hledger-mode . company-mode)
    (hledger-mode . flycheck-mode)
    :config
    (add-to-list 'company-backends 'hledger-company)
    :bind (("C-c a e" . hledger-jentry)
         ("C-c a r" . hledger-run-command)
         :map hledger-mode-map
         ("<kp-add>" . hledger-increment-entry-date)
         ("<kp-subtract>" . hledger-decrement-entry-date)))
  (use-package flycheck-hledger
    :after (flycheck hledger-mode)
    :custom
    (flycheck-hledger-strict t))
#+end_src

* Programming
** Generally, a code buffer
Let's make it all spaces, and clean themup on save.
#+begin_src elisp
  (defun stag-code-mode-tweaks ()
    (add-hook 'before-save-hook 'whitespace-cleanup)
    (setq-local indent-tabs-mode nil)
    (setq-local backward-delete-char-untabify-method 'untabify))

  (add-hook 'prog-mode-hook 'stag-code-mode-tweaks)
#+end_src
** Quick docs
#+begin_src elisp
  (add-hook 'prog-mode-hook 'turn-on-eldoc-mode)
#+end_src
** Line numbers
#+begin_src elisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src
** Balanced parens
#+begin_src elisp
(use-package smartparens
  :ensure smartparens  ;; install the package
  :hook (prog-mode . smartparens-strict-mode) ;; add `smartparens-mode` to these hooks
  :config
  ;; load default config
  (require 'smartparens-config))
#+end_src
** 80-column limit
#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator
  :config
  (setq fci-rule-column 80)
  (add-hook 'prog-mode-hook 'fci-mode))
#+END_SRC
** Elisp
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :hook ((lisp-mode emacs-lisp-mode) . enable-paredit-mode))

  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
#+END_SRC
